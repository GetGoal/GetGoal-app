{
	"info": {
		"_postman_id": "f717e0aa-d9fd-40e8-941d-092becaa41a2",
		"name": "GetGoal-App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31264302",
		"_collection_link": "https://gold-crater-526134.postman.co/workspace/CP23SSA1~209a1e10-cca8-49e0-9ea8-a8e6eecb9162/collection/30667795-f717e0aa-d9fd-40e8-941d-092becaa41a2?action=share&source=collection_link&creator=31264302"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "(400) SIGN UP /auth/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with specific properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('count');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\" : \"Chotiwit\",\n    \"last_name\" : \"Souyan\",\n    \"email\" : \"chotiwit.souyanmail.kmutt.ac.th\",\n    \"password\" : \"thisisapassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) SIGN UP /auth/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has code, message, count, data, and error properties\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.have.property(\"code\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"message\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"count\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"data\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"error\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_ame\" : \"Chotiwit\",\n    \"last_ame\" : \"Souyan\",\n    \"email\" : \"chotiwit.souyan@mail.kmutt.ac.th\",\n    \"password\" : \"thisisapassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) SIGN UP /auth/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has application/json content type\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has code, message, count, data, and error properties\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property('code');\r",
									"    pm.expect(responseBody).to.have.property('message');\r",
									"    pm.expect(responseBody).to.have.property('count');\r",
									"    pm.expect(responseBody).to.have.property('data');\r",
									"    pm.expect(responseBody).to.have.property('error');\r",
									"});\r",
									"\r",
									"pm.test(\"Data property is null\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data).to.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\" : \"Chotiwit\",\n    \"last_name\" : \"Souyan\",\n    \"email\" : \"test.cp23ssa1@mail.com\",\n    \"password\" : \"as\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "(200) SIGN IN /auth/sign-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is a JSON object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response has code, message, count, data, and error properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\" : \"CP@#SSA!\",\n    \"email\" : \"test.cp23ssa1@mail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/auth/sign-in",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"auth",
								"sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) SIGN IN /auth/sign-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 400', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"})",
									"",
									"pm.test('The \\'code\\' field is present in the response', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.code).to.exist;",
									"})",
									"",
									"pm.test('Verify that the \\'message\\' field is present in the response', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.exist;",
									"})",
									"",
									"pm.test('Verify that the \\'count\\' field is present in the response', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.count).to.exist;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\" : \"thisisapassword\",\n    \"email\" : \"iwit.souyan@mail.kmutt.ac.th\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/auth/sign-in",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"auth",
								"sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) SIGN IN /auth/sign-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"})",
									"",
									"pm.test('Code is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.code).to.be.a('number');",
									"    pm.expect(responseData.code).to.be.at.least(0);",
									"})",
									"",
									"pm.test('Message is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})",
									"",
									"pm.test('Count is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.count).to.be.a('number');",
									"    pm.expect(responseData.count).to.be.at.least(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\" : \"12345678\",\n    \"email\" : \"test.cp23ssa1@mail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/auth/sign-in",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"auth",
								"sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "provider sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"})",
									"",
									"pm.test('Code is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.code).to.be.a('number');",
									"    pm.expect(responseData.code).to.be.at.least(0);",
									"})",
									"",
									"pm.test('Message is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})",
									"",
									"pm.test('Count is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.count).to.be.a('number');",
									"    pm.expect(responseData.count).to.be.at.least(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\" : \"12345678\",\n    \"email\" : \"test.cp23ssa1@mail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/auth/sign-in",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"auth",
								"sign-in"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Label",
			"item": [
				{
					"name": "(200) GET ALL LABELS /",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"(200) GET ALL LABELS - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "RefreshToken",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfaWQiOjE1LCJmaXJzdF9uYW1lIjoiQ2hvdGl3aXQiLCJsYXN0X25hbWUiOiJTb3V5YW4iLCJlbWFpbCI6ImNob3Rpd2l0LnNvdXlhbkBtYWlsLmttdXR0LmFjLnRoIiwiZW1haWxfdmFsaWRhdGlvbl9zdGF0dXNfaWQiOjEsInBhc3N3b3JkX2hhc2giOiJBZzhIak1pejZSQmZRY2RsQkxRTHIxYkV0TVpTVVFRQTVGWjNKeGNFUXprIiwicGFzc3dvcmRfc2FsdCI6IiRhcmdvbjJpZCR2PTE5JG09NjU1MzYsdD0zLHA9MSRzMGd5ZG1mRUNOeEhieFBRSFdwRlRBJEFnOEhqTWl6NlJCZlFjZGxCTFFMcjFiRXRNWlNVUVFBNUZaM0p4Y0VRemsiLCJjb25maXJtYXRpb25fdG9rZW4iOiIxNTc3NDEiLCJ0b2tlbl9nZW5lcmF0aW9uX3RpbWUiOiIyMDI0LTAyLTE3VDAwOjM5OjU2LjM4MDk1MloiLCJwYXNzd29yZF9yZWNvdmVyeV90b2tlbiI6IiIsInJlY292ZXJ5X3Rva2VuX3RpbWUiOiIwMDAxLTAxLTAxVDAwOjAwOjAwWiIsImNyZWF0ZWRfYXQiOiIyMDI0LTAyLTE3VDAwOjM5OjU2LjM4MTA5MVoiLCJ1cGRhdGVkX2F0IjoiMjAyNC0wMi0xN1QwMDo0MDoyMC4yMjM0NjZaIiwiZGVsZXRlZF9hdCI6bnVsbCwidGFza3MiOm51bGwsImFjdGlvbl90eXBlcyI6bnVsbH0sImV4cCI6MTcwODcyMjg4MX0.8LN2BekvBYf7akxC_3MQ1snHlpzDJ-_sHA2LgyY7bCs",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/labels",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "(200) GET LABEL FOR SEARCH BAR /search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with code, message, count, data, and error properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('code', 'message', 'count', 'data', 'error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/labels/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"labels",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "(200) GET BY ID /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON object\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has data property with label_id, label_name, and program_id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"label_id\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"label_name\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"program_id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Count is a number\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"count\").that.is.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/labels/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"labels",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "(404) GET BY ID /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"(404) GET BY ID /:id - Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with code, message, count, data, and error properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('code', 'message', 'count', 'data', 'error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/labels/1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"labels",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) GET BY ID /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with code, message, count, data, and error properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('code', 'message', 'count', 'data', 'error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/labels/asdf",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"labels",
								"asdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) CREATE LABEL /",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a code property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('code');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a message property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a count property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('count');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has an error property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"label_name\" : \"automated test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/labels",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) CREATE LABEL /",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"(400) CREATE LABEL - Status code is 400 for missing data\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"label_name\" : \"automated test\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/labels",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) CREATE LABEL /",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"(400) CREATE LABEL - Status code is 400 for incorrect field name\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"lbel_name\" : \"Test\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/labels",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "(200) UPDATE TASK /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response has data property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test(\"Data property has label_id, label_name, and program_id properties\", function () {",
									"    var jsonData = pm.response.json().data;",
									"    pm.expect(jsonData).to.have.property('label_id');",
									"    pm.expect(jsonData).to.have.property('label_name');",
									"    pm.expect(jsonData).to.have.property('program_id');",
									"});",
									"",
									"pm.test(\"label_id is a number\", function () {",
									"    var labelId = pm.response.json().data.label_id;",
									"    pm.expect(labelId).to.be.a('number');",
									"});",
									"",
									"pm.test(\"label_name is a string\", function () {",
									"    var labelName = pm.response.json().data.label_name;",
									"    pm.expect(labelName).to.be.a('string');",
									"});",
									"",
									"pm.test(\"program_id is an array\", function () {",
									"    var programId = pm.response.json().data.program_id;",
									"    pm.expect(programId).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"label_name\" : \"tpdddp\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/labels/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"labels",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) UPDATE TASK /:id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response has code, message, count, data, and error properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"code\");",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData).to.have.property(\"count\");",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"labelname\" : \"tpdddp\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/labels/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"labels",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "(404) UPDATE TASK /:id Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response is an object with code, message, count, data, and error properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('code', 'message', 'count', 'data', 'error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"label_name\" : \"tpdddp\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/labels/100",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"labels",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) DELETE LABEL /:id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is an object with code, message, count, data, and error properties\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('code', 'message', 'count', 'data', 'error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"label_name\" : \"tpdddp\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/labels/asdf",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"labels",
								"asdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "(404) DELETE LABEL /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is an object with specific properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object').that.includes.all.keys('code', 'message', 'count', 'data', 'error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"label_name\" : \"tpdddp\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/labels/1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"labels",
								"1000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "(200) GET ALL PROGRAM /",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a content type of application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response contains data property with an array of programs\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('array').and.not.empty;",
									"    pm.expect(jsonData.data[0]).to.have.property('program_id');",
									"    pm.expect(jsonData.data[0]).to.have.property('program_name');",
									"    pm.expect(jsonData.data[0]).to.have.property('media_url');",
									"    pm.expect(jsonData.data[0]).to.have.property('rating');",
									"    pm.expect(jsonData.data[0]).to.have.property('program_desc');",
									"    pm.expect(jsonData.data[0]).to.have.property('expected_time');",
									"    pm.expect(jsonData.data[0]).to.have.property('tasks').that.is.an('array').and.not.empty;",
									"    pm.expect(jsonData.data[0].tasks[0]).to.have.property('task_id');",
									"    pm.expect(jsonData.data[0].tasks[0]).to.have.property('task_name');",
									"    pm.expect(jsonData.data[0].tasks[0]).to.have.property('task_status');",
									"    pm.expect(jsonData.data[0].tasks[0]).to.have.property('is_set_noti');",
									"    pm.expect(jsonData.data[0].tasks[0]).to.have.property('start_time');",
									"    pm.expect(jsonData.data[0].tasks[0]).to.have.property('category');",
									"    pm.expect(jsonData.data[0].tasks[0]).to.have.property('time_before_notify');",
									"    pm.expect(jsonData.data[0].tasks[0]).to.have.property('task_description');",
									"    pm.expect(jsonData.data[0].tasks[0]).to.have.property('link');",
									"    pm.expect(jsonData.data[0].tasks[0]).to.have.property('media_url');",
									"    pm.expect(jsonData.data[0].tasks[0]).to.have.property('related_program_id');",
									"    pm.expect(jsonData.data[0].tasks[0]).to.have.property('owner_id');",
									"    pm.expect(jsonData.data[0]).to.have.property('labels').that.is.an('array').and.not.empty;",
									"    pm.expect(jsonData.data[0].labels[0]).to.have.property('label_id');",
									"    pm.expect(jsonData.data[0].labels[0]).to.have.property('label_name');",
									"    pm.expect(jsonData.data[0]).to.have.property('created_at');",
									"    pm.expect(jsonData.data[0]).to.have.property('updated_at');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/programs",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"programs"
							]
						}
					},
					"response": []
				},
				{
					"name": "(200) GET PROGRAM BY ID /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a JSON content type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response has data object with program_id, program_name, and tasks properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('program_id');",
									"    pm.expect(jsonData.data).to.have.property('program_name');",
									"    pm.expect(jsonData.data).to.have.property('tasks');",
									"});",
									"",
									"pm.test(\"Each task has task_id, task_name, and task_status properties\", function () {",
									"    var tasks = pm.response.json().data.tasks;",
									"    tasks.forEach(function(task) {",
									"        pm.expect(task).to.have.property('task_id');",
									"        pm.expect(task).to.have.property('task_name');",
									"        pm.expect(task).to.have.property('task_status');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/programs/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"programs",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "(404) GET PROGRAM BY ID /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response is an object with specific properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/programs/1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"programs",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) GET PROGRAM BY ID /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is a JSON object\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/programs/asdf",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"programs",
								"asdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "(200) GET USER'S PROGRAM /user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Response contains data property with an array\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"pm.test(\"Each task in the data array has a task_id, task_name, and task_status\", function () {",
									"    pm.response.json().data.forEach(function(program) {",
									"        program.tasks.forEach(function(task) {",
									"            pm.expect(task).to.have.property('task_id');",
									"            pm.expect(task).to.have.property('task_name');",
									"            pm.expect(task).to.have.property('task_status');",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/programs/user",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"programs",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "(200) SEARCH PROGRAM /search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a content type of application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response contains a data array of objects\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"pm.test(\"Each task in the data array has required properties\", function () {",
									"    pm.response.json().data.forEach(function(program) {",
									"        program.tasks.forEach(function(task) {",
									"            pm.expect(task).to.have.property('task_id');",
									"            pm.expect(task).to.have.property('task_name');",
									"            pm.expect(task).to.have.property('task_status');",
									"            pm.expect(task).to.have.property('is_set_noti');",
									"            pm.expect(task).to.have.property('start_time');",
									"            pm.expect(task).to.have.property('category');",
									"            pm.expect(task).to.have.property('time_before_notify');",
									"            pm.expect(task).to.have.property('task_description');",
									"            pm.expect(task).to.have.property('link');",
									"            pm.expect(task).to.have.property('media_url');",
									"            pm.expect(task).to.have.property('related_program_id');",
									"            pm.expect(task).to.have.property('owner_id');",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Each label in the data array has required properties\", function () {",
									"    pm.response.json().data.forEach(function(program) {",
									"        program.labels.forEach(function(label) {",
									"            pm.expect(label).to.have.property('label_id');",
									"            pm.expect(label).to.have.property('label_name');",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Each program in the data array has required properties\", function () {",
									"    pm.response.json().data.forEach(function(program) {",
									"        pm.expect(program).to.have.property('program_id');",
									"        pm.expect(program).to.have.property('program_name');",
									"        pm.expect(program).to.have.property('media_url');",
									"        pm.expect(program).to.have.property('rating');",
									"        pm.expect(program).to.have.property('program_desc');",
									"        pm.expect(program).to.have.property('expected_time');",
									"        pm.expect(program).to.have.property('tasks');",
									"        pm.expect(program).to.have.property('labels');",
									"        pm.expect(program).to.have.property('created_at');",
									"        pm.expect(program).to.have.property('updated_at');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"search_text\": \"Morning Exercise Routine\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/programs/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"programs",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": "ex",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) SEARCH PROGRAM /search Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is an object with code, message, count, data, and error properties\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('code', 'message', 'count', 'data', 'error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"searh_text\": \"Morning Exercise Routine\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/programs/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"programs",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": "ex",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(200) FILTER PROGRAM /filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for response status code",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response content type",
									"pm.test(\"Response has content type of application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test for the presence of common properties in the response",
									"pm.test(\"Response has common properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"code\");",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData).to.have.property(\"count\");",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"// Test for each task in the data array to have specific properties",
									"pm.test(\"Each task in the data array has specific properties\", function () {",
									"    var tasks = pm.response.json().data[0].tasks;",
									"    tasks.forEach(function(task) {",
									"        pm.expect(task).to.have.property(\"task_id\");",
									"        pm.expect(task).to.have.property(\"task_name\");",
									"        pm.expect(task).to.have.property(\"task_status\");",
									"        pm.expect(task).to.have.property(\"is_set_noti\");",
									"        pm.expect(task).to.have.property(\"start_time\");",
									"        pm.expect(task).to.have.property(\"category\");",
									"        pm.expect(task).to.have.property(\"time_before_notify\");",
									"        pm.expect(task).to.have.property(\"task_description\");",
									"        pm.expect(task).to.have.property(\"link\");",
									"        pm.expect(task).to.have.property(\"media_url\");",
									"        pm.expect(task).to.have.property(\"related_program_id\");",
									"        pm.expect(task).to.have.property(\"owner_id\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"labels\" : [\"Morning Activities\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/programs/filter",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"programs",
								"filter"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) FILTER PROGRAM /filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is a JSON object with specific properties\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('code', 'message', 'count', 'data', 'error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"label\" : [\"Morning Activities\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/programs/filter",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"programs",
								"filter"
							]
						}
					},
					"response": []
				},
				{
					"name": "(200) CREATE NEW PROGRAM /",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response has a data property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('data');",
									"});",
									"",
									"pm.test(\"Each task in the data has a task_name property\", function () {",
									"    pm.response.json().data.tasks.forEach(function(task) {",
									"        pm.expect(task).to.have.property('task_name');",
									"    });",
									"});",
									"",
									"pm.test(\"Each label in the data has a label_name property\", function () {",
									"    pm.response.json().data.labels.forEach(function(label) {",
									"        pm.expect(label).to.have.property('label_name');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"program_name\": \"Test create new program\",\n    \"program_desc\": \"shpuld be created\",\n    \"media_url\": \"http://test.com\",\n    \"expected_time\": \"100\",\n    \"tasks\": [\n        {\n            \"task_name\": \"teset\",\n            \"task_description\": \"test desc\",\n            \"is_set_noti\": 1,\n            \"start_time\": \"2006-01-02T15:04:05Z\",\n            \"category\": \"test cate\",\n            \"time_before_notify\": 30\n        }\n    ],\n    \"labels\": [\n        {\n            \"label_name\": \"Exercise\"\n        },\n        {\n            \"label_name\": \"Test\"\n        }\n    ]\n    // \"user_id\" : 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/programs",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"programs"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) CREATE NEW PROGRAM / Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response has a code property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('code');",
									"});",
									"",
									"pm.test(\"Response has a message property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response has a count property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('count');",
									"});",
									"",
									"pm.test(\"Response has a data property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('data');",
									"});",
									"",
									"pm.test(\"Response has an error property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"progrname\": \"Test create new program\",\n    \"program_desc\": \"shpuld be created\",\n    \"media_url\": \"http://test.com\",\n    \"expected_time\": \"100\",\n    \"tasks\": [\n        {\n            \"task_name\": \"teset\",\n            \"task_description\": \"test desc\",\n            \"is_set_noti\": 1,\n            \"start_time\": \"2006-01-02T15:04:05Z\",\n            \"category\": \"test cate\",\n            \"time_before_notify\": 30\n        }\n    ],\n    \"labels\": [\n        {\n            \"label_name\": \"Exercise\"\n        },\n        {\n            \"label_name\": \"Test\"\n        }\n    ]\n    // \"user_id\" : 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/programs",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"programs"
							]
						}
					},
					"response": []
				},
				{
					"name": "(404) DELETE PROGRAM /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is a JSON object\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response has code, message, count, data, and error properties\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property('code');",
									"    pm.expect(responseBody).to.have.property('message');",
									"    pm.expect(responseBody).to.have.property('count');",
									"    pm.expect(responseBody).to.have.property('data');",
									"    pm.expect(responseBody).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/programs/1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"programs",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "(404) DELETE PROGRAM /:id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is a JSON object\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response has code, message, count, data, and error properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/programs/1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"programs",
								"1000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Task",
			"item": [
				{
					"name": "(200) GET ALL TASKS /",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');",
									"});",
									"",
									"pm.test(\"Response contains a 'code' property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('code');",
									"});",
									"",
									"pm.test(\"Response contains a 'message' property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response contains a 'count' property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('count');",
									"});",
									"",
									"pm.test(\"Response contains a 'data' property which is an array\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('data').that.is.an('array');",
									"});",
									"",
									"pm.test(\"Each element in the data array has the required properties\", function () {",
									"    pm.response.json().data.forEach(function(task) {",
									"        pm.expect(task).to.have.property('task_id');",
									"        pm.expect(task).to.have.property('task_name');",
									"        pm.expect(task).to.have.property('task_status');",
									"        pm.expect(task).to.have.property('is_set_noti');",
									"        pm.expect(task).to.have.property('start_time');",
									"        pm.expect(task).to.have.property('category');",
									"        pm.expect(task).to.have.property('time_before_notify');",
									"        pm.expect(task).to.have.property('task_description');",
									"        pm.expect(task).to.have.property('link');",
									"        pm.expect(task).to.have.property('media_url');",
									"        pm.expect(task).to.have.property('related_program_id');",
									"        pm.expect(task).to.have.property('owner_id');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "(200) GET TASK BY ID /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Response has a data object with task_id, task_name, and task_status properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.have.property(\"task_id\");",
									"    pm.expect(jsonData.data).to.have.property(\"task_name\");",
									"    pm.expect(jsonData.data).to.have.property(\"task_status\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/4",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "(404) GET TASK BY ID /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has a Content-Type header of application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response has properties code, message, count, data, and error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"code\");",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData).to.have.property(\"count\");",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) GET TASK BY ID /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Response is an object with specific properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('code', 'message', 'count', 'data', 'error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/asdf",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"asdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "(200) PLAN PROGRAM /plan/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a 'code' property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('code');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a 'message' property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a 'count' property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('count');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a 'data' property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('data');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/plan/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"plan",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) PLAN PROGRAM /plan/:id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON object with code, message, count, data, and error properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('code', 'message', 'count', 'data', 'error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/plan/asdfasdf",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"plan",
								"asdfasdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "(200) GET TO DO TASKS /to-do",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON object\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a code property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('code');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a message property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a count property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('count');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has an error property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"email\": \"kheintze0@gg.com\",\r\n        \"date\": \"2023-11-15\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/to-do",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"to-do"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) GET TO DO TASKS /to-do Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with code, message, count, data, and error properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('code', 'message', 'count', 'data', 'error');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"email\": \"kheintze0@gg.com\",\r\n        \"date\": \"2023-11-152\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/to-do",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"to-do"
							]
						}
					},
					"response": []
				},
				{
					"name": "(201) CREATE NEW TASK /",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a JSON content type\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains data with task_id, task_name, task_status, and start_time properties\", function () {\r",
									"    var jsonData = pm.response.json().data;\r",
									"    pm.expect(jsonData).to.have.property('task_id');\r",
									"    pm.expect(jsonData).to.have.property('task_name');\r",
									"    pm.expect(jsonData).to.have.property('task_status');\r",
									"    pm.expect(jsonData).to.have.property('start_time');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"task_name\" : \"สวัสกี\",\n    \"task_description\": \"test desc\",\n    \"is_set_noti\": 1,\n    \"start_time\": \"2024-02-19T00:00:00Z\",\n    \"category\": \"test cate\",\n    \"time_before_notify\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) CREATE NEW TASK /",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON object\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has code, message, count, data, and error properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('count');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ask_name\" : \"สวัสกี\",\n    \"task_description\": \"test desc\",\n    \"is_set_noti\": 1,\n    \"start_time\": \"2024-02-19T00:00:00Z\",\n    \"category\": \"test cate\",\n    \"time_before_notify\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "(201) JOIN PROGRAM /join-ptogram/:program_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a code property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('code');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a message property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a count property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('count');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has a task_id property\", function () {\r",
									"    pm.response.json().data.forEach(function(task) {\r",
									"        pm.expect(task).to.have.property('task_id');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has a task_name property\", function () {\r",
									"    pm.response.json().data.forEach(function(task) {\r",
									"        pm.expect(task).to.have.property('task_name');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has a task_status property\", function () {\r",
									"    pm.response.json().data.forEach(function(task) {\r",
									"        pm.expect(task).to.have.property('task_status');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has a start_time property\", function () {\r",
									"    pm.response.json().data.forEach(function(task) {\r",
									"        pm.expect(task).to.have.property('start_time');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has a category property\", function () {\r",
									"    pm.response.json().data.forEach(function(task) {\r",
									"        pm.expect(task).to.have.property('category');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has a time_before_notify property\", function () {\r",
									"    pm.response.json().data.forEach(function(task) {\r",
									"        pm.expect(task).to.have.property('time_before_notify');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has a task_description property\", function () {\r",
									"    pm.response.json().data.forEach(function(task) {\r",
									"        pm.expect(task).to.have.property('task_description');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has a link property\", function () {\r",
									"    pm.response.json().data.forEach(function(task) {\r",
									"        pm.expect(task).to.have.property('link');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has a media_url property\", function () {\r",
									"    pm.response.json().data.forEach(function(task) {\r",
									"        pm.expect(task).to.have.property('media_url');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has a related_program_id property\", function () {\r",
									"    pm.response.json().data.forEach(function(task) {\r",
									"        pm.expect(task).to.have.property('related_program_id');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has an owner_id property\", function () {\r",
									"    pm.response.json().data.forEach(function(task) {\r",
									"        pm.expect(task).to.have.property('owner_id');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response has an error property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modifications\": [\n        {\n            \"is_set_notification\": 1,\n            \"start_time\": \"2024-01-01 12:00:00\",\n            \"time_before_notify\": 300\n        },\n        {\n            \"is_set_notification\": 1,\n            \"start_time\": \"2024-01-02 12:00:00\",\n            \"time_before_notify\": 300\n        },\n        {\n            \"is_set_notification\": 1,\n            \"start_time\": \"2024-01-03 12:00:00\",\n            \"time_before_notify\": 300\n        },\n        {\n            \"is_set_notification\": 1,\n            \"start_time\": \"2024-01-04 12:00:00\",\n            \"time_before_notify\": 300\n        }\n    ],\n    \"email\": \"ddonaho4@gg.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/join-program/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"join-program",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) JOIN PROGRAM /join-ptogram/:program_id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON object\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has code, message, count, data, and error properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('count');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modifications\": [\n        {\n            \"is_set_notification\": 1,\n            \"start_time\": \"2024-01-01 12:00:00\",\n            \"time_before_notify\": 300\n        },\n        {\n            \"is_set_notification\": 1,\n            \"start_time\": \"2024-01-02 12:00:00\",\n            \"time_before_notify\": 300\n        },\n        {\n            \"is_set_notification\": 1,\n            \"start_time\": \"2024-01-03 12:00:00\",\n            \"time_before_notify\": 300\n        },\n        {\n            \"is_set_notification\": 1,\n            \"start_time\": \"2024-01-04 12:00:00\",\n            \"time_before_notify\": 300\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/join-program/100",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"join-program",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) EDIT TASK /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON object\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has code, message, count, data, and error properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('count');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"task_name\" : \"teset\",\n    \"task_description\": \"test desc\",\n    \"is_set_noti\": 1,\n    \"start_time\": \"2024-12-01T00:00:00Z\",\n    \"category\": \"test cate\",\n    \"time_before_notify\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "(404) EDIT TASK /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the structure of the response JSON\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('code');\r",
									"  pm.expect(responseData).to.have.property('message');\r",
									"  pm.expect(responseData).to.have.property('count');\r",
									"  pm.expect(responseData).to.have.property('data');\r",
									"  pm.expect(responseData).to.have.property('error');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code field is present and has a valid value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"task_name\" : \"teset\",\n    \"task_description\": \"test desc\",\n    \"is_set_noti\": 1,\n    \"start_time\": \"2024-12-01T00:00:00Z\",\n    \"category\": \"test cate\",\n    \"time_before_notify\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/6900",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"6900"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) EDIT TASK /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a code property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('code');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a message property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a count property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('count');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has an error property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"task_nam\" : \"teset\",\n    \"task_decription\": \"test desc\",\n    \"is_set_noti\": 1,\n    \"start_time\": \"2024-12-01T00:00:00Z\",\n    \"category\": \"test cate\",\n    \"time_before_notify\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/6900",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"6900"
							]
						}
					},
					"response": []
				},
				{
					"name": "(200) DONE PROGRAM /done/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Data property contains task_id, task_name, and task_status\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('task_id');\r",
									"    pm.expect(data).to.have.property('task_name');\r",
									"    pm.expect(data).to.have.property('task_status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/done/12",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"done",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) DONE PROGRAM /done/:id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON object\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has code, message, count, data, and error properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('count');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/done/asdf",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"done",
								"asdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "(404) DONE PROGRAM /done/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON object\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has code, message, count, data, and error properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('count');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/done/12000",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"done",
								"12000"
							]
						}
					},
					"response": []
				},
				{
					"name": "(200) UNDONE PROGRAM /un-done/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON object\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has data property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/un-done/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"un-done",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) UNDONE PROGRAM /un-done/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a code property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('code');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a message property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a count property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('count');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has an error property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/un-done/asdf",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"un-done",
								"asdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "(404) UNDONE PROGRAM /un-done/:id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with specific properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('code', 'message', 'count', 'data', 'error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/un-done/12000",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"un-done",
								"12000"
							]
						}
					},
					"response": []
				},
				{
					"name": "(400) DELETE PROGRAM /:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has code, message, count, data, and error properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('count');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/qw",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"qw"
							]
						}
					},
					"response": []
				},
				{
					"name": "(404) DELETE PROGRAM /:id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with code, message, count, data, and error properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('code', 'message', 'count', 'data', 'error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"task_name\" : \"teset\",\n    \"task_description\": \"test desc\",\n    \"is_set_noti\": \"1\",\n    \"start_time\": \"2024-12-01 00:00:00\",\n    \"category\": \"test cate\",\n    \"time_before_notify\": \"30\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/tasks/100000",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"tasks",
								"100000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "(200) GET USER PROFILE /users/profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Response has a data object with user_id, email, first_name, and last_name properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('first_name');",
									"    pm.expect(jsonData.data).to.have.property('last_name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/users/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "(401) GET USER PROFILE /users/profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with code, message, count, data, and error properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('code', 'message', 'count', 'data', 'error');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3QuY3AyM3NzYTFAbWFpbC5jb20iLCJ1c2VyX2lkIjo3LCJmaXJzdF9uYW1lIjoiY3AyM3NzYTEiLCJsYXN0X25hbWUiOiJnZXRnb2FsIiwiZXhwIjoxNzA4MzY0ODIwfQ.-XtfJCv-Ry1VhbP0SobArDFNvI85rrSpd4jGU5HR7-g",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/{{base_url}}/v1/users/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base_url}}",
								"v1",
								"users",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3QuY3AyM3NzYTFAbWFpbC5jb20iLCJ1c2VyX2lkIjo3LCJmaXJzdF9uYW1lIjoiY3AyM3NzYTEiLCJsYXN0X25hbWUiOiJnZXRnb2FsIiwiZXhwIjo3NzA4MzYyNjY4fQ.g71T-C7ss3pkyp2okW1jYh4MBOV1UidYRHSRNvy04Po",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "refresh_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfaWQiOjcsImZpcnN0X25hbWUiOiJjcDIzc3NhMSIsImxhc3RfbmFtZSI6ImdldGdvYWwiLCJlbWFpbCI6InRlc3QuY3AyM3NzYTFAbWFpbC5jb20iLCJlbWFpbF92YWxpZGF0aW9uX3N0YXR1c19pZCI6MSwicGFzc3dvcmRfaGFzaCI6IlNZcytTV2RYN3g3c3dyZWEzbnRqTUtKWE1UbXNCNDRsREdJdkRENVJCOWciLCJwYXNzd29yZF9zYWx0IjoiJGFyZ29uMmlkJHY9MTkkbT02NTUzNix0PTMscD0xJE5BL0EyempILzV5eGNZMHh0VTBkVFEkU1lzK1NXZFg3eDdzd3JlYTNudGpNS0pYTVRtc0I0NGxER0l2REQ1UkI5ZyIsImNvbmZpcm1hdGlvbl90b2tlbiI6IiIsInRva2VuX2dlbmVyYXRpb25fdGltZSI6IjAwMDEtMDEtMDFUMDA6MDA6MDBaIiwicGFzc3dvcmRfcmVjb3ZlcnlfdG9rZW4iOiIiLCJyZWNvdmVyeV90b2tlbl90aW1lIjoiMDAwMS0wMS0wMVQwMDowMDowMFoiLCJjcmVhdGVkX2F0IjoiMjAyNC0wMi0xOVQyMzozMjozMy45NzAxNjZaIiwidXBkYXRlZF9hdCI6IjIwMjQtMDItMTlUMjM6MzI6MzMuOTcwMTY2WiIsImRlbGV0ZWRfYXQiOm51bGwsInRhc2tzIjpudWxsLCJhY3Rpb25fdHlwZXMiOm51bGx9LCJleHAiOjE3MDg5Njc0Njh9.a_ToBego9IN9nA5JgIxlALkk8kTCNtKr5Izp5sO_ALw",
			"type": "string"
		}
	]
}